/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.kwaadpepper.serialintcaster

import kotlin.random.Random
import kotlin.system.measureNanoTime
import kotlin.test.*

class SerialCasterTest {

    companion object {
        private const val ALPHANUMERIC =
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
        private const val LENGTH = 6
        private const val SEED: Long = 1492
    }

    /** Test integer encodes to string */
    @Test
    fun testSerialEncode() {
        assertEquals(
                "1bzzzO",
                SerialCaster.encode(14776335, 0, LENGTH, ALPHANUMERIC.toCharArray()),
                "Encoding 14776335(10) on base with ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 should give 1bzzzO"
        )
    }

    /** Test integer encodes to string with default dict */
    @Test
    fun testSerialEncodeWithDefaultDict() {
        assertEquals(
                "1bzzzO",
                SerialCaster.encode(14776335, 0, LENGTH),
                "Encoding 14776335(10) on base with ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 should give 1bzzzO"
        )
    }

    /** Tests String decode to integer */
    @Test
    fun testSerialDecode() {
        assertEquals(SerialCaster.decode("000HLC", 0, ALPHANUMERIC.toCharArray()), 666)
    }

    /** Tests String decode to integer wth default dict */
    @Test
    fun testSerialDecodeWithDefaultDict() {
        assertEquals(SerialCaster.decode("000HLC", 0), 666)
    }

    /** Tests if a serial has a char not in dictm it throws an error */
    @Test
    fun testBreakIfSerialHasInvalidChar() {
        assertFailsWith<SerialCasterException>(
                message = "If serial has an invalid char it should throw an exception",
                block = { SerialCaster.decode("000HLC", SEED, ALPHANUMERIC.toCharArray()) }
        )
    }

    /** Tests if a serial is too shortm it throws and error */
    @Test
    fun testBreakIfDecodedIsTooShort() {
        assertFailsWith<SerialCasterException>(
                message = "If the decoded serial is too short (<=2) it should throw an exception",
                block = { SerialCaster.decode("A", SEED, ALPHANUMERIC.toCharArray()) }
        )
    }

    /** Tests throws and error if using different dicts between encode and decode */
    @Test
    fun testBreakIfDecodedCharListIsDifferentThanTheOneUsedForEncoding() {
        assertFailsWith<SerialCasterException>(
                message = "If the decoded serial has a different char list than the provided one",
                block = {
                    SerialCaster.decode(
                            SerialCaster.encode(14776335, SEED, 26, "01".toCharArray()),
                            SEED,
                            ALPHANUMERIC.toCharArray()
                    )
                }
        )
    }

    /** Tests if encode would throw an error if serial length is not high enough. */
    @Test
    fun testBreakIfLengthIsNotHighEnough() {
        assertFailsWith<SerialCasterException>(
                message =
                        "Tests if encode would throw an error if serial length is not high enough",
                block = {
                    // This should break.
                    SerialCaster.encode(14776336, SEED, LENGTH, ALPHANUMERIC.toCharArray())
                }
        )
    }

    /** Tests if encode would throw an error if dict is not long enough. */
    @Test
    fun testBreakIfCharListIsTooShort() {
        assertFailsWith<SerialCasterException>(
                message = "Tests if encode would throw an error if dict is not long enough.",
                block = {
                    // This should break.
                    SerialCaster.encode(14776336, SEED, LENGTH, "1".toCharArray())
                }
        )
    }

    /** Tests encode and decode random values */
    @Test
    fun testEncodeAndDecodeWithRandomValues() {
        val randomGenerator = Random(System.currentTimeMillis())
        val loops = randomGenerator.nextInt(50, 70)
        var i = 0
        while (i <= loops) {
            val randomInteger: Long = randomGenerator.nextInt(0, 999999).toLong()
            assertEquals(
                    randomInteger,
                    SerialCaster.decode(
                            SerialCaster.encode(
                                    randomInteger,
                                    SEED,
                                    LENGTH,
                                    ALPHANUMERIC.toCharArray()
                            ),
                            SEED,
                            ALPHANUMERIC.toCharArray()
                    )
            )
            i++
        }
    }

    /** Tests speed creating coupons. */
    @Test
    fun testSpeedTestOnCouponGeneration() {
        val acceptableTimeInSeconds = 4
        val numberOfCoupons = 99999
        val coupons = mutableListOf<String>()
        val measured = measureNanoTime {
            var i = 0
            while (i <= numberOfCoupons) {
                val randomGenerator = Random(System.currentTimeMillis())
                val randomInteger = randomGenerator.nextInt(0, numberOfCoupons).toLong()
                coupons.add(
                        SerialCaster.encode(randomInteger, SEED, LENGTH, ALPHANUMERIC.toCharArray())
                )
                i++
            }
        }
        val elapsed = measured / 1e+9
        assertTrue(
                elapsed < acceptableTimeInSeconds,
                "Encoding $numberOfCoupons coupons took more than $acceptableTimeInSeconds seconds $elapsed)"
        )
    }

    /** Tests speed reading coupons. */
    @Test
    fun testSpeedTestOnCouponDecode() {
        val acceptableTimeInSeconds = 4
        var numberOfCoupons = 99999
        val coupons = mutableListOf<String>()
        val decodedCoupons = mutableListOf<Long>()

        var i = 1
        while (i <= numberOfCoupons) {
            val randomGenerator = Random(System.currentTimeMillis())
            val randomInteger = randomGenerator.nextInt(0, numberOfCoupons).toLong()
            coupons.add(
                    SerialCaster.encode(randomInteger, SEED, LENGTH, ALPHANUMERIC.toCharArray())
            )
            i++
        }

        numberOfCoupons = coupons.size

        val measured = measureNanoTime {
            i = 1
            while (i < numberOfCoupons) {
                decodedCoupons.add(
                        SerialCaster.decode(coupons[i], SEED, ALPHANUMERIC.toCharArray())
                )
                i++
            }
        }

        val elapsed = measured / 1e+9
        assertTrue(
                elapsed < acceptableTimeInSeconds,
                "Decoding $numberOfCoupons coupons took more than $acceptableTimeInSeconds seconds $elapsed)"
        )
    }
}
